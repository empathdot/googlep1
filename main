import os
import pandas as pd
import telegram
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler
from gtts import gTTS
from pygooglevoice import Voice
from pygooglevoice.exceptions import AuthenticationError
import time

# Telegram Bot Token
TELEGRAM_TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'

# Google Text-to-Speech Credentials
GOOGLE_TTS_CREDENTIALS = 'path/to/your/google-credentials.json'

# Initialize Telegram Bot
updater = Updater(TELEGRAM_TOKEN, use_context=True)
dispatcher = updater.dispatcher

# Load client data
clients = pd.read_csv('clients.csv')

# Conversation states
ADD_GV, IMPORT_SCRIPT, START_BATCH = range(3)

def start(update, context):
    update.message.reply_text('Welcome! Use the following commands:\n'
                              '/addgv - Add a Google Voice account\n'
                              '/importscript - Import a custom script\n'
                              '/startbatch - Start a batch call\n'
                              '/call <phone_number> - Make a call\n'
                              '/dndcheck <phone_number> - Make a call with DND check')

def add_gv(update, context):
    update.message.reply_text('Please provide your Google Voice credentials in the format:\n'
                              'google voice email:password:backup email:backup email code (if asked)')
    return ADD_GV

def import_script(update, context):
    update.message.reply_text('Please provide your custom script. Use {name}, {email}, and {platform} as placeholders.')
    return IMPORT_SCRIPT

def start_batch(update, context):
    update.message.reply_text('Drop your data file here.')
    return START_BATCH

def handle_add_gv(update, context):
    credentials = update.message.text.split(':')
    if len(credentials) < 3 or len(credentials) > 4:
        update.message.reply_text('Invalid format. Please try again.')
        return ADD_GV

    email, password, backup_email = credentials[:3]
    backup_code = credentials[3] if len(credentials) == 4 else None

    voice = Voice()
    try:
        voice.login(email, password, backup_email, backup_code)
        update.message.reply_text('Google Voice account added successfully.')
    except AuthenticationError as e:
        update.message.reply_text(f'Error: {e}')

    return ConversationHandler.END

def handle_import_script(update, context):
    script = update.message.text
    context.user_data['script'] = script
    update.message.reply_text('Script imported successfully.')
    return ConversationHandler.END

def handle_start_batch(update, context):
    if 'document' in update.message:
        file = update.message.document.get_file()
        file.download('clients.csv')
        update.message.reply_text('Data file received. Starting batch calls.')
        clients = pd.read_csv('clients.csv')
        for index, row in clients.iterrows():
            phone_number = row['phone']
            name = row['name']
            email = row['email']
            platform = row['platform']
            script = context.user_data.get('script', default_script)
            script = script.format(name=name, email=email, platform=platform)

            # Convert script to speech
            tts = gTTS(text=script, lang='en')
            tts.save("output.mp3")

            # Make the call
            try:
                call = voice.call(phone_number)
                call.play("output.mp3")
                update.message.reply_text(f'Calling {phone_number} with the script.')
            except AuthenticationError as e:
                update.message.reply_text(f'Error: {e}')
    else:
        update.message.reply_text('No data file received. Please try again.')
    return ConversationHandler.END

def call(update, context):
    phone_number = context.args[0]
    client_data = clients[clients['phone'] == phone_number]

    if client_data.empty:
        update.message.reply_text(f'No client found with phone number {phone_number}.')
        return

    client_data = client_data.iloc[0]
    name = client_data['name']
    email = client_data['email']
    platform = client_data['platform']

    script = context.user_data.get('script', default_script)
    script = script.format(name=name, email=email, platform=platform)

    # Convert script to speech
    tts = gTTS(text=script, lang='en')
    tts.save("output.mp3")

    # Make the call
    try:
        call = voice.call(phone_number)
        call.play("output.mp3")
        update.message.reply_text(f'Calling {phone_number} with the script.')
    except AuthenticationError as e:
        update.message.reply_text(f'Error: {e}')

def dnd_check(update, context):
    phone_number = context.args[0]
    client_data = clients[clients['phone'] == phone_number]

    if client_data.empty:
        update.message.reply_text(f'No client found with phone number {phone_number}.')
        return

    client_data = client_data.iloc[0]
    name = client_data['name']
    email = client_data['email']
    platform = client_data['platform']

    script = context.user_data.get('script', default_script)
    script = script.format(name=name, email=email, platform=platform)

    # Convert script to speech
    tts = gTTS(text=script, lang='en')
    tts.save("output.mp3")

    # Make the call and check for DND
    try:
        call = voice.call(phone_number)
        call.play("output.mp3")
        time.sleep(5)  # Wait for 5 seconds to check if the call was answered
        if call.status == 'voicemail':
            update.message.reply_text(f'{phone_number} is on do-not-disturb. Retrying in 5 minutes.')
            time.sleep(300)  # Wait for 5 minutes
            call = voice.call(phone_number)
            call.play("output.mp3")
        update.message.reply_text(f'Called {phone_number} with the script.')
    except AuthenticationError as e:
        update.message.reply_text(f'Error: {e}')

# Conversation handlers
conv_handler = ConversationHandler(
    entry_points=[CommandHandler('addgv', add_gv),
                  CommandHandler('importscript', import_script),
                  CommandHandler('startbatch', start_batch)],
    states={
        ADD_GV: [MessageHandler(Filters.text & ~Filters.command, handle_add_gv)],
        IMPORT_SCRIPT: [MessageHandler(Filters.text & ~Filters.command, handle_import_script)],
        START_BATCH: [MessageHandler(Filters.document.mime_type("text/csv") | Filters.document.mime_type("application/vnd.ms-excel"), handle_start_batch)]
    },
    fallbacks=[CommandHandler('cancel', ConversationHandler.END)]
)

dispatcher.add_handler(conv_handler)
dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(CommandHandler("call", call))
dispatcher.add_handler(CommandHandler("dndcheck", dnd_check))

updater.start_polling()
updater.idle()
